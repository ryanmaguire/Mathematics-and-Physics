(******************************************************************************)
(*                                 LICENSE                                    *)
(******************************************************************************)
(*  This file is part of libtmpl.                                             *)
(*                                                                            *)
(*  libtmpl is free software: you can redistribute it and/or modify           *)
(*  it under the terms of the GNU General Public License as published by      *)
(*  the Free Software Foundation, either version 3 of the License, or         *)
(*  (at your option) any later version.                                       *)
(*                                                                            *)
(*  libtmpl is distributed in the hope that it will be useful,                *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *)
(*  GNU General Public License for more details.                              *)
(*                                                                            *)
(*  You should have received a copy of the GNU General Public License         *)
(*  along with libtmpl.  If not, see <https://www.gnu.org/licenses/>.         *)
(******************************************************************************)
(*    This file was written by Peter Doyle for his Math 17 course.            *)
(******************************************************************************)

(* Phase transition in the hard-core lattice gas model.                       *)
(* When you update 10^6 times for a grid of size 20                           *)
(* you see what's really going on here.                                       *)
(* Periodic arrays                                                            *)
get[mat_,{i_, j_}] := mat[
    [
        Mod[i, Length[mat], 1],
        Mod[j, Length[mat[[1]]], 1]
    ]
]

(* Count neighbors                                                            *)
nbrs[mat_,{a_,b_}] := get[mat,#]&/@{
    {a+1, b},
    {a-1, b},
    {a, b+1},
    {a, b-1}
}//Total

(* "Now and then there's a loop such as I."                                   *)
update[mat0_,lambda_:1,reps_:1] := Module[
    {m,n,a,b,rnd,mat=mat0},
    {m,n}=Dimensions[mat];
    Do[
        a = RandomInteger[{1, m}];
        b = RandomInteger[{1, n}];
        rnd = RandomReal[];
        If[
            mat[[a,b]] == 0 &&
            nbrs[mat, {a, b}] == 0 &&
            rnd < lambda ||
            mat[[a, b]] == 1 &&
            rnd < 1/lambda,
            mat[[a,b]] = 1-mat[[a, b]]
        ],
        {reps}
    ];
    mat
]

(* Run.                                                                       *)
run[lambda_:1,gridsize_:20,reps_:10^6] := update[
    IdentityMatrix[gridsize], lambda, reps
]//ArrayPlot

(* With lambda=.05, it's a gas.                                               *)
run[.05]

(* With lambda = 1 there are lots of little islands.                          *)
run[1.0]

(* With lambda=5 there may be tiny islands that aren't with the program.      *)
run[5]

(* With lambda=10 that's going to be very rare.                               *)
run[10]

