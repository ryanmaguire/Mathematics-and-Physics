(******************************************************************************)
(*                                 LICENSE                                    *)
(******************************************************************************)
(*  This file is part of libtmpl.                                             *)
(*                                                                            *)
(*  libtmpl is free software: you can redistribute it and/or modify it        *)
(*  it under the terms of the GNU General Public License as published by      *)
(*  the Free Software Foundation, either version 3 of the License, or         *)
(*  (at your option) any later version.                                       *)
(*                                                                            *)
(*  libtmpl is distributed in the hope that it will be useful,                *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *)
(*  GNU General Public License for more details.                              *)
(*                                                                            *)
(*  You should have received a copy of the GNU General Public License         *)
(*  along with libtmpl.  If not, see <https://www.gnu.org/licenses/>.         *)
(******************************************************************************)
(*    This file was created for Math 17 at Dartmouth college.                 *)
(******************************************************************************)
(*    Author: Ryan Maguire                                                    *)
(*    Date: 2021/07/28                                                        *)
(******************************************************************************)

(* The goal is to implicitly plot every compact two-dimensional orientable    *)
(* manifold without boundary. Let's start with a means of parametrizing       *)
(* closed curves with "genus" n. The genus 1 curve is simple.                 *)
ParametricPlot[
    {Cos[2 Pi t], Sin[2 Pi t]}, {t, 0, 1},
    AxesLabel->{"x", "y"}, PlotRange->All
]

(* All we've done is parameterize a circle, which we're calling a "genus 1    *)
(* closed curve" Now, if we imagine thickening this curve, we'd get a donut,  *)
(* or a torus. A torus is a genus 1 surface. So if we can formulate this idea *)
(* in terms of equations, then we've obtained our first compact orientable    *)
(* manifold of dimension two. By "thickening" we can say that, at each point  *)
(* on the circle, we attach a circle.                                         *)
ParametricPlot3D[
    {
        (2.0 + Cos[2.0*Pi*t]) * Cos[2.0*Pi*u],
        (2.0 + Cos[2.0*Pi*t]) * Sin[2.0*Pi*u],
        Sin[2.0*Pi*t]
    },
    {t, 0.0, 1.0}, {u, 0.0, 1.0},
    AxesLabel->{"x", "y", "z"},
    PlotRange->All
]

(* To get a "genus 2" closed curve, we can take the idea for the circle and   *)
(* double the speed in the y-component. What happens if we double t in the    *)
(* x-component?                                                               *)
ParametricPlot[
    {
        Cos[2.0*Pi*t],
        Sin[4.0*Pi*t]
    },
    {t, 0.0, 1.0},
    AxesLabel->{"x", "y"},
    PlotRange->All
]

(* This is the lemniscate of Gerono. The equation he studied can be obtained  *)
(* from a few trigonometric formulas and manipulations. We want to study the  *)
(* solution set to: x^4 - x^2 + y^2 = 0. Let's show that this is the same     *)
(* curve.                                                                     *)
ContourPlot[x^4 - x^2 + y^2 == 0, {x, -1.0, 1.0}, {y, -1.0, 1.0}]

(* With this we can now "implicitly" define a genus 2 surface. By implicitly, *)
(* I mean we can write the surface as the solution to f(x,y,z) = 0.           *)
(* Let's try this.                                                            *)
h := 0.05
lem[x_, y_] := x^4 - x^2 + y^2
surf[x_, y_, z_] := lem[x, y]^2 + z^2 - h
ContourPlot3D[
    surf[x, y, z] == 0,
    {x, -1.2, 1.2}, {y, -1, 1}, {z, -1.2, 1.2},
    AxesLabel->{"x", "y", "z"}
]

(* We can try the same thing with (cos(t), sin(3t)) as follows:               *)
ParametricPlot[
    {
        Cos[2.0*Pi*t],
        Sin[6.0*Pi*t]
    },
    {t, 0.0, 1.0},
    AxesLabel->{"x", "y"},
    PlotRange->All
]

(* Finally, a genus 3 surface.                                                *)
lem3[x_,y_] := y^2 + 16.0*x^6 - 24.0*x^4 + 9.0*x^2 - 1.0
surf3[x_, y_, z_] := lem3[x, y]^2 + z^2 - h
ContourPlot[lem3[x,y] == 0, {x, -1.0, 1.0}, {y, -1.0, 1.0}]
ContourPlot3D[
    surf3[x,y,z] == 0,
    {x, -1.5, 1.5}, {y, -1.3, 1.3}, {z, -1.2, 1.2},
    AxesLabel->{"x", "y", "z"}, PlotPoints->100
]
